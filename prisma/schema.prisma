generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // ðŸ”¹ New settings/trust fields
  timezone             String  @default("UTC")
  theme                String?
  reminderDailyTime    String?
  reminderDailyEnabled Boolean @default(false)
  summaryWeeklyEnabled Boolean @default(false)

  habits    Habit[]
  tags      Tag[]     @relation("UserTags")
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Habit {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  // ðŸ”¹ Replaced/clarified targets
  weeklyTarget Int @default(4) // target completions per week

  isArchived Boolean @default(false)
  color      String  @default("gray")

  // ðŸ”¹ Sorting helpers (Soon features)
  priority  Int     @default(2) // 1=high,2=med,3=low
  timeOfDay String? // "morning" | "afternoon" | "evening"

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs HabitLog[]
  tags HabitTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”¹ Fast queries & duplicate-name guard
  @@unique([userId, name])
  @@index([userId, isArchived])
}

model HabitLog {
  id      String   @id @default(cuid())
  habitId String
  date    DateTime
  status  String   @default("done") // "done" | "skipped"
  note    String?

  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([habitId, date])
  @@index([habitId, date])
}

model Tag {
  id     String  @id @default(cuid())
  userId String
  name   String
  color  String?

  user   User       @relation("UserTags", fields: [userId], references: [id], onDelete: Cascade)
  habits HabitTag[]

  @@unique([userId, name])
}

model HabitTag {
  habitId String
  tagId   String

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([habitId, tagId])
}
